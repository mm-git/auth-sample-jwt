// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graph

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Todo struct {
	ID       string     `json:"id"`
	Title    string     `json:"title"`
	Status   TodoStatus `json:"status"`
	CreateAt time.Time  `json:"createAt"`
}

type TodoStatus string

const (
	TodoStatusNotYet TodoStatus = "notYet"
	TodoStatusDone   TodoStatus = "done"
)

var AllTodoStatus = []TodoStatus{
	TodoStatusNotYet,
	TodoStatusDone,
}

func (e TodoStatus) IsValid() bool {
	switch e {
	case TodoStatusNotYet, TodoStatusDone:
		return true
	}
	return false
}

func (e TodoStatus) String() string {
	return string(e)
}

func (e *TodoStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TodoStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TodoStatus", str)
	}
	return nil
}

func (e TodoStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
